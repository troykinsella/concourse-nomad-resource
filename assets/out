#!/usr/bin/env bash

set -eu -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source="$1"
if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>" >&2
  exit 1
fi

payload=$(mktemp /tmp/nomad-resource.XXXXXX)
cat > "$payload" <&0

require_attr() {
  local type="$1"
  local name="$2"
  local val=$(jq -r ".$type.$name // \"\"" < "$payload")
  test -n "$val" || { echo "must supply '$name' $type attribute" >&2; exit 1; }
  echo "$val"
}

do_job_plan() {
  local job_file="$1"
  nomad job plan "$job_file"
}

do_job_run() {
  local job_file="$1"
  nomad job run "$job_file"
  await_job_status "$job_name" running
}

do_job_stop() {
  local job_name="$1"
  nomad job stop "$job_name"
}

query_job_status() {
  local job_name="$1"
  nomad job status "$job_name" | egrep '^Status' | awk '{print $NF}'
}

await_job_status() {
  local job_name="$1"
  local status="$2"
  local wait_interval="${3:-5}"
  local attempts="${4:-10}"

  echo "Awaiting $job_name status: $status..."

  local success="nope"
  for i in {1..$attempts}; do
    if [[ $(query_job_status "$job_name") == $status ]]; then
      success="yep"
      break
    fi
    sleep "$wait_interval"
  done

  if ! [[ $success == yep ]]; then
    echo "Timed out waiting for $status status" >&2
    nomad job status "$job_name"
    exit 1
  fi
}

export NOMAD_ADDR="$(require_attr source address)"

nomad_region=$(jq -r '.source.region // ""' < "$payload")
if [[ -n $nomad_region ]]; then
  export NOMAD_REGION="$nomad_region"
fi

namespace=$(jq -r '.source.namespace // ""' < "$payload")
if [[ -n $namespace ]]; then
  export NOMAD_NAMESPACE="$namespace"
fi

token=$(jq -r '.source.token // ""' < "$payload")
if [[ -n $token ]]; then
  export NOMAD_TOKEN="$token"
fi

dir="$(require_attr params dir)"
job_stop="$(jq -r '.params.job_stop // ""' < "$payload")"
job_plan="$(jq -r '.params.job_plan // ""' < "$payload")"
job_run="$(jq -r '.params.job_run // ""' < "$payload")"
job_name="$(require_attr params job_name)"

cd "$source/$dir"

nomad --version

if [[ -n "$job_stop" ]]; then
  do_job_stop "$job_name"
elif [[ -n "$job_plan" ]]; then
  job_file="$(require_attr params job_file)"
  do_job_plan "$job_file"
elif [[ -n "$job_run" ]]; then
  job_file="$(require_attr params job_file)"
  do_job_run "$job_file"
else
  echo "must supply at least one param: job_stop, job_plan, job_run" >&2
  exit 1
fi

(
  set -x
  nomad job status "$job_name"
  nomad job status
)

printf '{"version":{}}' >&3
